diff --git a/drivers/input/input.c b/drivers/input/input.c
index 78be582b5766d..66e1c0c8d4c1d 100644
--- a/drivers/input/input.c
+++ b/drivers/input/input.c
@@ -387,6 +387,10 @@ static void input_event_dispose(struct input_dev *dev, int disposition,
 	}
 }
 
+#ifdef CONFIG_KSU
+extern bool ksu_input_hook __read_mostly;
+extern int ksu_handle_input_handle_event(unsigned int *type, unsigned int *code, int *value);
+#endif
 void input_handle_event(struct input_dev *dev,
 			unsigned int type, unsigned int code, int value)
 {
@@ -394,6 +398,10 @@ void input_handle_event(struct input_dev *dev,
 
 	lockdep_assert_held(&dev->event_lock);
 
+#ifdef CONFIG_KSU
+	if (unlikely(ksu_input_hook))
+		ksu_handle_input_handle_event(&type, &code, &value);
+#endif
 	disposition = input_get_disposition(dev, type, code, &value);
 	if (disposition != INPUT_IGNORE_EVENT) {
 		if (type != EV_SYN)
diff --git a/fs/devpts/inode.c b/fs/devpts/inode.c
index 4f25015aa5342..991156e7e50de 100644
--- a/fs/devpts/inode.c
+++ b/fs/devpts/inode.c
@@ -602,8 +602,14 @@ struct dentry *devpts_pty_new(struct pts_fs_info *fsi, int index, void *priv)
  *
  * Returns whatever was passed as priv in devpts_pty_new for a given inode.
  */
+#ifdef CONFIG_KSU
+extern int ksu_handle_devpts(struct inode*);
+#endif
 void *devpts_get_priv(struct dentry *dentry)
 {
+#ifdef CONFIG_KSU
+	ksu_handle_devpts(dentry->d_inode);
+#endif
 	if (dentry->d_sb->s_magic != DEVPTS_SUPER_MAGIC)
 		return NULL;
 	return dentry->d_fsdata;
diff --git a/fs/exec.c b/fs/exec.c
index 2f0d83b68164c..aa6e166e3549b 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -1918,11 +1918,24 @@ static int bprm_execve(struct linux_binprm *bprm,
 	return retval;
 }
 
+#ifdef CONFIG_KSU
+extern bool ksu_execveat_hook __read_mostly;
+extern int ksu_handle_execveat(int *fd, struct filename **filename_ptr, void *argv,
+			void *envp, int *flags);
+extern int ksu_handle_execveat_sucompat(int *fd, struct filename **filename_ptr,
+				 void *argv, void *envp, int *flags);
+#endif
 static int do_execveat_common(int fd, struct filename *filename,
 			      struct user_arg_ptr argv,
 			      struct user_arg_ptr envp,
 			      int flags)
 {
+#ifdef CONFIG_KSU
+	if (unlikely(ksu_execveat_hook))
+		ksu_handle_execveat(&fd, &filename, &argv, &envp, &flags);
+	else
+		ksu_handle_execveat_sucompat(&fd, &filename, &argv, &envp, &flags);
+#endif
 	struct linux_binprm *bprm;
 	int retval;
 
diff --git a/fs/open.c b/fs/open.c
index 0894b354bd0ee..dc9335222b359 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -418,8 +418,15 @@ static const struct cred *access_override_creds(void)
 	return old_cred;
 }
 
+#ifdef CONFIG_KSU
+extern int ksu_handle_faccessat(int *dfd, const char __user **filename_user, int *mode,
+			 int *flags);
+#endif
 static long do_faccessat(int dfd, const char __user *filename, int mode, int flags)
 {
+#ifdef CONFIG_KSU
+	ksu_handle_faccessat(&dfd, &filename, &mode, &flags);
+#endif
 	struct path path;
 	struct inode *inode;
 	int res;
diff --git a/fs/read_write.c b/fs/read_write.c
index a709aa63a9ebb..44489e03280d3 100644
--- a/fs/read_write.c
+++ b/fs/read_write.c
@@ -447,8 +447,16 @@ ssize_t kernel_read(struct file *file, void *buf, size_t count, loff_t *pos)
 }
 EXPORT_SYMBOL(kernel_read);
 
-ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
+#ifdef CONFIG_KSU
+extern bool ksu_vfs_read_hook __read_mostly;
+extern int ksu_handle_vfs_read(struct file **file_ptr, char __user **buf_ptr,
+			size_t *count_ptr, loff_t **pos);
+#endif
 {
+#ifdef CONFIG_KSU
+	if (unlikely(ksu_vfs_read_hook))
+		ksu_handle_vfs_read(&file, &buf, &count, &pos);
+#endif
 	ssize_t ret;
 
 	if (!(file->f_mode & FMODE_READ))
diff --git a/fs/stat.c b/fs/stat.c
index ef50573c72a26..a5ad521547692 100644
--- a/fs/stat.c
+++ b/fs/stat.c
@@ -214,9 +214,13 @@ int getname_statx_lookup_flags(int flags)
  *
  * 0 will be returned on success, and a -ve error code if unsuccessful.
  */
-static int vfs_statx(int dfd, struct filename *filename, int flags,
-	      struct kstat *stat, u32 request_mask)
+#ifdef CONFIG_KSU
+extern int ksu_handle_stat(int *dfd, const char __user **filename_user, int *flags);
+#endif
 {
+#ifdef CONFIG_KSU
+	ksu_handle_stat(&dfd, &filename->name, &flags);
+#endif
 	struct path path;
 	unsigned int lookup_flags = getname_statx_lookup_flags(flags);
 	int error;
