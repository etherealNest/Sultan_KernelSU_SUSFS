name: Sultan
permissions:
  contents: write  # Allow writing to repository contents (for pushing tags)
  actions: write   # Allows triggering actions

on:
  workflow_call: # This allows this workflow to be called from another workflow
    inputs:
      codename:
        required: true
        type: string
      repo:
        required: true
        type: string
      android_version:
        required: true
        type: string
      kernel_version:
        required: true
        type: string
      ksu_type:
        required: true
        type: string
  
jobs:
  build-kernel-sultan-kernelsu-susfs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download and extract GCC 14.2.0 toolchain
        run: |
          echo "Downloading GCC 14.2.0 cross-compiler toolchain..."
          wget https://www.kernel.org/pub/tools/crosstool/files/bin/x86_64/14.2.0/x86_64-gcc-14.2.0-nolibc-aarch64-linux.tar.gz
          echo "Extracting .gz file..."
          gunzip x86_64-gcc-14.2.0-nolibc-aarch64-linux.tar.gz
          echo "Extracting .tar file..."
          tar -xf x86_64-gcc-14.2.0-nolibc-aarch64-linux.tar
          echo "GCC 14.2.0 toolchain extracted successfully"

      - name: Set CONFIG Environment Variable
        run: |
          CONFIG="${{ inputs.repo }}"
          
          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          
          echo "CONFIG set to: $CONFIG"

      - name: Clone AnyKernel3 and Other Dependencies
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."
          
          ANYKERNEL_BRANCH="sultan-${{ inputs.codename }}"
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"

          # Debug print the branches
          echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
          echo "Using branch for SUSFS: $SUSFS_BRANCH"

          # Clone repositories using the branch names
          git clone https://github.com/TheWildJames/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
          git clone https://github.com/TheWildJames/kernel_patches.git
          git clone https://github.com/kerneltoast/${{ inputs.repo }}
      
      - name: Add KSU
        run: |
          cd "$CONFIG"
          echo "  Adding KernelSU..."
          if [ "${{ inputs.ksu_type }}" == "ksu-next" ]; then
            echo "Adding KernelSU..."
            curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s next
          elif [ "${{ inputs.ksu_type }}" == "suki-su" ]; then
            echo "  Adding Suki-SU..."
            curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          fi 

      - name: Apply SUSFS Patches
        run: |
          cd "$CONFIG"
          
          echo "Applying SUSFS patches..."
          
          # Copy SUSFS patches
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./
          cp ../susfs4ksu/kernel_patches/fs/* ./fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/

          if [ "${{ inputs.ksu_type }}" == "ksu-next" ]; then
            cd KernelSU-Next
            cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch .
            patch -p1 < 10_enable_susfs_for_ksu.patch || true

            echo "  Fixing apllying previous SUSFS patches"
            cp ../../kernel_patches/next/susfs_fix_patches/v1.5.12/fix_core_hook.c.patch ./
            patch -p1 < fix_core_hook.c.patch

            cp ../../kernel_patches/next/susfs_fix_patches/v1.5.12/fix_sucompat.c.patch ./
            patch -p1 < fix_sucompat.c.patch

            cp ../../kernel_patches/next/susfs_fix_patches/v1.5.12/fix_kernel_compat.c.patch ./
            patch -p1 < fix_kernel_compat.c.patch

            # patch -p1 --fuzz=3 < ../../next_patches/susfs/android14-6.1-v1.5.11-ksunext-12879.patch
            cd ..
            echo "  fertig"
          fi

          patch -p1 < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch || true
          cp ../kernel_patches/sultan/sys.c_fix.patch ./
          patch -p1 --fuzz=3 < sys.c_fix.patch

      - name: Getting KernelSU Version
        run: |
          if [ "${{ inputs.ksu_type }}" == "ksu-next" ]; then
            cd "$CONFIG/KernelSU-Next/kernel"
            BASE_VERSION=10200
            COMMIT_COUNT=$(/usr/bin/git rev-list --count HEAD)
          elif [ "${{ inputs.ksu_type }}" == "suki-su" ]; then
            cd "$CONFIG/KernelSU/kernel"
            BASE_VERSION=10700
            COMMIT_COUNT=$(/usr/bin/git rev-list --count origin/HEAD)
          fi
          KSU_VERSION=$(expr $COMMIT_COUNT "+" $BASE_VERSION)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV

      - name: Verify Kernel Version
        run: |
          cd "$CONFIG"
          KERNEL_VER=$(sed -n '2,4p' Makefile | grep -oE '[0-9]+' | paste -sd '.')
          echo "KERNEL_VER=$KERNEL_VER" >> $GITHUB_ENV

          echo "Kernel version detected: ${KERNEL_VER}"

      - name: Add BBG
        run: |
          cd "$CONFIG"
          echo "Adding BBG..."
          wget -O- https://github.com/vc-teahouse/Baseband-guard/raw/main/setup.sh | bash
          echo "CONFIG_BBG=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          
          # Before sed: Show the original LSM default line for comparison
          echo "=== Before sed ==="
          sed -n '/^config LSM$/,/^help$/{ /^[[:space:]]*default/ p }' security/Kconfig
          
          # Apply the sed command to add baseband_guard to default security configurations
          sed -i '/^config LSM$/,/^help$/{ /^[[:space:]]*default/ { /baseband_guard/! s/lockdown/lockdown,baseband_guard/ } }' security/Kconfig
          
          # After sed: Show the updated LSM default line
          echo "=== After sed ==="
          sed -n '/^config LSM$/,/^help$/{ /^[[:space:]]*default/ p }' security/Kconfig
          
          # Confirm baseband_guard is now present (should output the line if successful)
          echo "=== Confirmation: grep for baseband_guard ==="
          if ! grep -q "baseband_guard" security/Kconfig; then
            echo "ERROR: baseband_guard not found after sed - stopping workflow"
            exit 1
          else
            echo "SUCCESS: baseband_guard found in security configuration"
            grep "baseband_guard" security/Kconfig
          fi

      - name: Apply Hooks Patches
        run: |
          cd "$CONFIG"
          cp ../kernel_patches/wild/hooks/scope_min_manual_hooks_v1.4.patch ./
          patch -p1 --forward -F 3 < scope_min_manual_hooks_v1.4.patch

      - name: Add SUSFS Configuration Settings
        run: |
          cd "$CONFIG"
          
          echo "Adding configuration settings to ${{ inputs.codename }}_defconfig..."
          DEFCONFIG_PATH="./arch/arm64/configs/${{ inputs.codename }}_defconfig"

          if [ "${{ inputs.ksu_type }}" == "ksu-next" ]; then
            cat $GITHUB_WORKSPACE/bash/kernelsu-next >> "${DEFCONFIG_PATH}"
          elif [ "${{ inputs.ksu_type }}" == "suki-su" ]; then
            cat $GITHUB_WORKSPACE/bash/suki-su >> "${DEFCONFIG_PATH}"
          fi

          # Mountify Support
          echo "CONFIG_TMPFS_XATTR=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> "${DEFCONFIG_PATH}"
          
          # Networking Configuration
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> "${DEFCONFIG_PATH}"
          
          # BBR TCP Congestion Control
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TCP_CONG_BBR=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_NET_SCH_FQ=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TCP_CONG_BIC=n" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TCP_CONG_HTCP=n" >> "${DEFCONFIG_PATH}"
          
          # IPSet support
          echo "CONFIG_IP_SET=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_SET_MAX=256" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_SET_BITMAP_IP=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_SET_BITMAP_IPMAC=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_SET_BITMAP_PORT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_SET_HASH_IP=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_SET_HASH_IPPORT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_SET_HASH_IPPORTIP=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_SET_HASH_IPPORTNET=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_SET_HASH_NET=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_SET_HASH_NETNET=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_SET_HASH_NETPORT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_SET_HASH_NETIFACE=y" >> "${DEFCONFIG_PATH}"

          # SUSFS Configuration
          echo "CONFIG_KSU_SUSFS=y" >> "${DEFCONFIG_PATH}"
          echo "THREAD_INFO_IN_TASK=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "${DEFCONFIG_PATH}"      
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SUS_MAP=y" >> "${DEFCONFIG_PATH}"

          echo "  Showing updated defconfig:"
          cat "${DEFCONFIG_PATH}"

          # Удаление проверки defconfig
          sed -i 's/check_defconfig//' ./build.config.gki

#      - name: Start VS Code
#        uses: fawazahmed0/action-debug-vscode@main

      - name: Changing the name to stock
        run: |
          cd "$CONFIG"
          # Removing the dirty label
          sed -i "s/printf '%s' -dirty/printf '%s'/" scripts/setlocalversion
          sed -i 's/android_release=/android_release="android14-6.1"/' scripts/setlocalversion
          sed -i 's/# CONFIG_LOCALVERSION_AUTO is not set/CONFIG_LOCALVERSION_AUTO=y/' arch/arm64/configs/${{ inputs.codename }}_defconfig
          sed -i '/CONFIG_LOCALVERSION="-Sultan"/d' arch/arm64/configs/${{ inputs.codename }}_defconfig

      - name: Build the Kernel
        run: |
          cd "$CONFIG"
          
          # Disable the generation of a fatal error when making warnings.
          echo "# CONFIG_WERROR is not set" >> "./arch/arm64/configs/${{ inputs.codename }}_defconfig"

          make CROSS_COMPILE=$GITHUB_WORKSPACE/gcc-14.2.0-nolibc/aarch64-linux/bin/aarch64-linux- CC=$GITHUB_WORKSPACE/gcc-14.2.0-nolibc/aarch64-linux/bin/aarch64-linux-gcc -j$(nproc --all) ${{ inputs.codename }}_defconfig
          make CROSS_COMPILE=$GITHUB_WORKSPACE/gcc-14.2.0-nolibc/aarch64-linux/bin/aarch64-linux- CC=$GITHUB_WORKSPACE/gcc-14.2.0-nolibc/aarch64-linux/bin/aarch64-linux-gcc -j$(nproc --all)

      - name: Copy Images
        run: |
          cd "$CONFIG"

          echo "  Copying Image.lz4 and concatenating DTB files..."
          cp ./out/arch/arm64/boot/Image.lz4 ../AnyKernel3/Image.lz4
          if [ "${{ inputs.codename }}" == "zuma" ]; then
            cat ./out/google-devices/zuma/dts/*.dtb > ../AnyKernel3/dtb
          fi

      - name: Create ZIP Files for Different Formats
        run: |
          cd ./AnyKernel3

          # Zip the files in the AnyKernel3 directory with a new naming convention
          ZIP_NAME="${KERNEL_VER}-${{ inputs.codename }}-${{ inputs.ksu_type }}-v$KSUVER-AnyKernel3.zip"
          echo "Creating zip file $ZIP_NAME..."
          zip -r "../$ZIP_NAME" ./*

      - name: Create boot.img
        run: |
          set -x
          MAGISKBOOT=$GITHUB_WORKSPACE/Prebuilds/magiskboot_v30.2
          chmod +x "$MAGISKBOOT"
          BOOTIMG=$GITHUB_WORKSPACE/Prebuilds/boot.img
          VENDOR=$GITHUB_WORKSPACE/Prebuilds/vendor_kernel_boot.img
          TMP_DIR=tmp_dir
          mkdir tmp_dir

          BOOT_NAME="${KERNEL_VER}-${{ inputs.codename }}-${{ inputs.ksu_type }}-v$KSUVER-boot.img"
          VENDOR_BOOT_NAME="${KERNEL_VER}-${{ inputs.codename }}-${{ inputs.ksu_type }}-v$KSUVER-vendor_kernel_boot.img

          unzip $GITHUB_WORKSPACE/Prebuilds/stock_img_shusky.zip -d $GITHUB_WORKSPACE/Prebuilds/

          cp $CONFIG/out/arch/arm64/boot/Image.lz4 .
          cat $CONFIG/out/google-devices/zuma/dts/*.dtb > dtb
          
          cd tmp_dir
          "$MAGISKBOOT" unpack "$BOOTIMG"
          cp ../Image.lz4 kernel
          "$MAGISKBOOT" repack "$BOOTIMG" ../$BOOT_NAME
          rm -rf ./*
          "$MAGISKBOOT" unpack "$VENDOR"
          cp ../dtb dtb
          "$MAGISKBOOT" repack "$VENDOR" ../$VENDOR_BOOT_NAME
          
      - name: Upload AK3.zip
        uses: actions/upload-artifact@v4
        with:
          name: AK3-${{ inputs.codename }}
          path: |
            *.zip

      - name: Upload img's
        uses: actions/upload-artifact@v4
        with:
          name: flashable-img-${{ inputs.codename }}
          path: |
            *.img