name: Build and Release Sultan Kernels

permissions:
  contents: write  # Allow writing to repository contents (for pushing tags)
  actions: write   # Allows triggering actions
  
on:
  workflow_dispatch:
    inputs:
      run_type:
        description: 'Run Type'
        required: false
        type: choice
        options:
          - manual
          - matrix
      codename:
        description: 'Codename:'
        required: true
        type: choice
        options:
          - zuma
        default: 'zuma'
      repo:
        description: 'Kernel Repository:'
        required: true
        type: choice
        options:
          - android_kernel_google_zuma
        default: 'android_kernel_google_zuma'
      android_version:
        description: 'Android Version:' 
        required: true
        type: choice
        options:
          - android14
        default: 'android14'
      kernel_version:
        description: 'Kernel Version:'
        required: true
        type: choice
        options:
          - 6.1
        default: '6.1'
      ksu_type:
        description: 'KSU type'
        required: true
        type: choice
        options:
          - ksu-next
          - suki-su
        default: 'ksu-next'
      create_release:
        description: 'Create a release after matrix build?'
        required: false
        type: boolean
        default: false
jobs:
  build-kernel-manual:
    if: github.event.inputs.run_type == 'manual'
    uses: ./.github/workflows/sultan.yml
    secrets: inherit
    with:
      codename: ${{ github.event.inputs.codename }}
      repo: ${{ github.event.inputs.repo }}
      android_version: ${{ github.event.inputs.android_version }}
      kernel_version: ${{ github.event.inputs.kernel_version }}
      ksu_type: ${{ github.event.inputs.ksu_type }}

  build-kernel-matrix:
    if: github.event.inputs.run_type == 'matrix'
    strategy:
      matrix:
        ksu_type: [ksu-next, suki-su]
    uses: ./.github/workflows/sultan.yml
    secrets: inherit
    with:
      codename: ${{ github.event.inputs.codename }}
      repo: ${{ github.event.inputs.repo }}
      android_version: ${{ github.event.inputs.android_version }}
      kernel_version: ${{ github.event.inputs.kernel_version }}
      ksu_type: ${{ matrix.ksu_type }}

  trigger-release:
    if: github.event.inputs.create_release == 'true' && github.event.inputs.run_type == 'matrix'
    runs-on: ubuntu-latest
    needs:
        - build-kernel-matrix
    env:
      REPO_OWNER: ${{ github.repository_owner }}
      REPO_NAME: Sultan_KernelSU_SUSFS
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_NAME: "Sultan Kernels With KernelSU Next and SukiSU Ultra & SUSFS v1.5.12"
      RELEASE_NOTES: |       
        ⚠️ **COMPATIBILITY NOTICE** ⚠️
        Please ensure compatibility by comparing release dates with official Sultan kernel releases
        
        Module: 
        -> https://github.com/sidex15/ksu_module_susfs
        
        Managers (nightly builds):
        -> KernelSU Next manager Spoofed: https://nightly.link/KernelSU-Next/KernelSU-Next/workflows/build-manager-spoofed/next/Manager.zip!
        -> SukiSU Ultra manager: https://nightly.link/SukiSU-Ultra/SukiSU-Ultra/workflows/build-manager/main/manager.zip

        KernelFlasher for AnyKernel3.zip:
          -> https://github.com/fatalcoder524/KernelFlasher/tree/v1.6.0
        
        Features:
        [+] There are two options to choose from:
          -> SukiSU Ultra 
          -> KernelSU Next
        [+] SUSFS v1.5.12
        [+] Built-in Baseband-guard
        [+] Built-in Manual hooks
        [+] Magic Mount

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Get the Latest Tag from GitHub
      - name: Generate and Create New Tag
        run: |
            # Generate a new tag based on the current commit SHA
            NEW_TAG=(date -u +'%Y.%m.%d-%H:%M')-$(git rev-parse --short HEAD)
            
            # Output the new tag to be used
            echo "New tag: $NEW_TAG"
            
            # Set the new tag as an environment variable to be used in later steps
            echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV
            
            # Create the tag in the repository
            git tag $NEW_TAG
            git push origin $NEW_TAG
            
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts

      # Create GitHub Release and upload files if make_release is true
      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}  # Use the generated tag for the release
          release_name: ${{ env.RELEASE_NAME }}  # Pass the RELEASE_NAME to the action
          body: ${{ env.RELEASE_NOTES }}  # Pass the RELEASE_NOTES to the action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets Dynamically
        run: |
          # Loop through all files in the downloaded-artifacts directory
          for file in ./downloaded-artifacts/*/*; do
              # Skip directories
              if [ -d "$file" ]; then
                  continue
              fi

              # Upload the file to the GitHub release
              echo "Uploading $file..."
              gh release upload ${{ env.NEW_TAG }} "$file"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_TAG: ${{ env.NEW_TAG }}

      # Display Files Uploaded
      - name: Display Files Uploaded
        run: |
          echo "GitHub release created with the following files:"
          ls ./downloaded-artifacts/**/*